#!/bin/bash

function print_usage {
    echo "Usage: $0 [archive_path] [-f (vhdl_package|vhdl_entity|c_header)]" >&2
}

function gen_info {
    echo "This file is automatically generated"
    echo "    script:             $0"
    echo "    date:               $(date)"
    echo "    machine:            $(hostname)"
    echo "    user                $(whoami)"
    echo "    working path:       $(pwd)"
    echo "    archive local root: $ARCHIVEPATH"
    echo "    output format:      $OUTPUTFORMAT"
    echo ""
    echo "Reposotory root:           $SVN_REPOSTORY_ROOT"
    echo "Amount of items analyzed:  $SVN_ITEMS"
    echo "Lowest SVN revision:       $SVN_MIN_REVISION"
    echo "Highest SVN revision:      $SVN_MAX_REVISION"
    echo "Trunk revision:            $SVN_TRUNK_REVISION"
    echo "Local modifications:       $SVN_LOCAL_MODIFICATIONS"
    echo "Build date:                $BUILD_DATE"
    echo "Build time:                $BUILD_TIME"
    echo "Build UNIX time (UTC):     $BUILD_UNIX_TIME"
}

function gen_vhdl_package {
    echo "-- This file is automatically generated"
    echo "--     script:             $0"
    echo "--     date:               $(date)"
    echo "--     machine:            $(hostname)"
    echo "--     user                $(whoami)"
    echo "--     working path:       $(pwd)"
    echo "--     archive local root: $ARCHIVEPATH"
    echo "--     output format:      $OUTPUTFORMAT"
    echo ""
    echo "library ieee;"
    echo "use ieee.std_logic_1164.all;";
    echo "use ieee.numeric_std.all;";
    echo ""
    echo "package tl_svn_info_pkg is"
    echo "    constant c_svn_min_revision          : integer := $SVN_MIN_REVISION;"
    echo "    constant c_svn_max_revision          : integer := $SVN_MAX_REVISION;"
    echo "    constant c_svn_trunk_revision        : integer := $SVN_TRUNK_REVISION;"
    echo "    constant c_svn_local_modifications   : integer := $SVN_LOCAL_MODIFICATIONS;"
    echo "    constant c_build_date                : unsigned(31 downto 0) := x\"$BUILD_DATE\";"
    echo "    constant c_build_time                : unsigned(23 downto 0) := x\"$BUILD_TIME\";"
    echo "    constant c_build_unix_time           : integer := $BUILD_UNIX_TIME;"
    echo ""
    echo "    function tl_svn_is_dirty return boolean;"
    echo "    function tl_svn_is_latest return boolean;"
    echo "end package;"
    echo ""
    echo "package body tl_svn_info_pkg is"
    echo "    function tl_svn_is_dirty return boolean is"
    echo "    begin"
    echo "        if c_svn_local_modifications > 0 or c_svn_min_revision /= c_svn_max_revision then"
    echo "            return true;"
    echo "        else"
    echo "            return false;"
    echo "        end if;"
    echo "    end function;"
    echo ""
    echo "    function tl_svn_is_latest return boolean is"
    echo "    begin"
    echo "        if c_svn_min_revision = c_svn_trunk_revision then"
    echo "            return true;"
    echo "        else"
    echo "            return false;"
    echo "        end if;"
    echo "    end function;"
    echo "end package body;"
}

function gen_vhdl_entity {
    echo "-- This file is automatically generated"
    echo "--     script:             $0"
    echo "--     date:               $(date)"
    echo "--     machine:            $(hostname)"
    echo "--     user                $(whoami)"
    echo "--     working path:       $(pwd)"
    echo "--     archive local root: $ARCHIVEPATH"
    echo "--     output format:      $OUTPUTFORMAT"
    echo ""
    echo "library ieee;"
    echo "use ieee.std_logic_1164.all;";
    echo "use ieee.numeric_std.all;";
    echo ""
    echo "entity tl_svn_info is"
    echo "    port ("
    echo "        min_revision         : out unsigned(31 downto 0);"
    echo "        max_revision         : out unsigned(31 downto 0);"
    echo "        trunk_revision       : out unsigned(31 downto 0);"
    echo "        local_modifications  : out unsigned(31 downto 0);"
    echo "        build_date           : out unsigned(31 downto 0);"
    echo "        build_time           : out unsigned(31 downto 0);"
    echo "        build_unix_time      : out unsigned(31 downto 0);"
    echo "        is_dirty             : out std_logic;"
    echo "        is_latest            : out std_logic"
    echo "    );"
    echo "end entity;"
    echo ""
    echo "architecture rtl of tl_svn_info is"
    echo "    constant c_svn_min_revision          : integer := $SVN_MIN_REVISION;"
    echo "    constant c_svn_max_revision          : integer := $SVN_MAX_REVISION;"
    echo "    constant c_svn_trunk_revision        : integer := $SVN_TRUNK_REVISION;"
    echo "    constant c_svn_local_modifications   : integer := $SVN_LOCAL_MODIFICATIONS;"
    echo "    constant c_build_date                : unsigned(31 downto 0) := x\"$BUILD_DATE\";"
    echo "    constant c_build_time                : unsigned(23 downto 0) := x\"$BUILD_TIME\";"
    echo "    constant c_build_unix_time           : integer := $BUILD_UNIX_TIME;"
    echo "begin"
    echo "    min_revision         <= to_unsigned(c_svn_min_revision, 32);"
    echo "    max_revision         <= to_unsigned(c_svn_max_revision, 32);"
    echo "    trunk_revision       <= to_unsigned(c_svn_trunk_revision, 32);"
    echo "    local_modifications  <= to_unsigned(c_svn_local_modifications, 32);"
    echo "    build_date           <= c_build_date;"
    echo "    build_time           <= c_build_date;"
    echo "    build_unix_time      <= to_unsigned(c_build_unix_time, 32);"
    echo "    is_dirty             <= '1' when c_svn_min_revision /= c_svn_max_revision or";
    echo "                            c_svn_local_modifications /= 0 else '0';";
    echo "    is_latest            <= '1' when c_svn_min_revision = c_svn_trunk_revision else '0';"
    echo "end architecture;"
}

function gen_c_header {
    echo "/* This file is automatically generated"
    echo " *     script:             $0"
    echo " *     date:               $(date)"
    echo " *     machine:            $(hostname)"
    echo " *     user                $(whoami)"
    echo " *     working path:       $(pwd)"
    echo " *     archive local root: $ARCHIVEPATH"
    echo " *     output format:      $OUTPUTFORMAT"
    echo " */"
    echo ""
    echo "#define SVN_MIN_REVISION          $SVN_MIN_REVISION"
    echo "#define SVN_MAX_REVISION          $SVN_MAX_REVISION"
    echo "#define SVN_TRUNK_REVISION        $SVN_TRUNK_REVISION"
    echo "#define SVN_LOCAL_MODIFICATIONS   $SVN_LOCAL_MODIFICATIONS"
    echo "#define BUILD_DATE_TIME_STR       \"$(date)\""
    echo "#define BUILD_DATE                0x$BUILD_DATE"
    echo "#define BUILD_TIME                0x$BUILD_TIME"
    echo "#define BUILD_UNIX_TIME           $BUILD_UNIX_TIME"
    echo "#define SVN_IS_DIRTY              (SVN_MIN_REVISION == SVN_MAX_REVISION && SVN_LOCAL_MODIFICATIONS ? 1 : 0)"
    echo "#define SVN_IS_LATEST             (SVN_MIN_REVISION == SVN_TRUNK_REVISION)"
}


function get_svn_revision {
    VERSION_INFO=$(svn info $ARCHIVEPATH --depth=infinity | awk '
        /* initialize */
        BEGIN {
            min_version = 0xFFFFFFFF
            max_version = 0x00000000
            items       = 0
        }
        /* for each revision line */
        /^Revision: [0-9]+$/ {
            items++
            if ($2 < min_version && $2 > 0) {
                min_version = $2;
            }
            if ($2 > max_version) {
                max_version = $2;
            }
        }
        /* output data */
        END {
            print items
            print min_version
            print max_version
        }
    ')
    if [ "$?" == "0" ]; then
        # expand array
        VERSION_INFO_ARRAY=($VERSION_INFO)
        SVN_ITEMS=${VERSION_INFO_ARRAY[0]}
        SVN_MIN_REVISION=${VERSION_INFO_ARRAY[1]}
        SVN_MAX_REVISION=${VERSION_INFO_ARRAY[2]}
        return 0
    else
        return $?
    fi
}

function get_svn_modifications {
    SVN_LOCAL_MODIFICATIONS=$(svn st $ARCHIVEPATH | wc -l)
    return $?
}

function get_svn_trunk_revision {
    SVN_REPOSTORY_ROOT=$(svn info $ARCHIVEPATH | awk '
        /^Repository Root: / {
            print $3
        }
    ')
    if [ "$?" != "0" ]; then
        return $?
    fi;
    SVN_TRUNK_REVISION=$(svn info $SVN_REPOSTORY_ROOT | awk '
        /^Revision: [0-9]+$/ {
            print $2
        }
    ')
    return $?
}

function get_date_code {
    BUILD_DATE=$(date +%Y%m%d)
    BUILD_TIME=$(date +%H%M%S)
    BUILD_UNIX_TIME=$(date -u +%s)
    return 0
}

OUTPUTFORMAT=unknown
ARCHIVEPATH=.

# parse parameters
while [ "$1" ]; do
    case "$1" in
    -f)
        if [ "$2" ]; then
            OUTPUTFORMAT=$2
            shift
        else
            echo "-f requires an argument" >&2
            print_usage
            exit 1
        fi
        ;;
    *)
        ARCHIVEPATH=$1
        ;;
    esac
    shift
done


# retrieve SVN revision info
get_svn_revision
if [ "$?" != "0" ]; then
    exit $?
fi

# warn upon unclean archive
if [ "$SVN_MIN_REVISION" != "$SVN_MAX_REVISION" ]; then
    echo "Warning: Your archive has multiple revisions, this build is NOT reproducible" >&2
    echo "         Run 'svn up' in the archive root to fix this" >&2
fi

# retrieve local modifications info
get_svn_modifications
if [ "$?" != "0" ]; then
    exit $?
fi

if [ "$SVN_LOCAL_MODIFICATIONS" != "0" ]; then
    echo "Warning: Your archive has $SVN_LOCAL_MODIFICATIONS local modifications, this build is NOT reproducible" >&2
    echo "         Run 'svn commit' to commit all changes and make sure 'svn st' returns nothing" >&2
fi

# retrieve trunk revision number
get_svn_trunk_revision
if [ "$?" != "0" ]; then
    exit $?
fi

# retrieve date & time
get_date_code
if [ "$?" != "0" ]; then
    exit $?
fi

# generate output
case "$OUTPUTFORMAT" in
vhdl_package)
    gen_vhdl_package
    ;;
vhdl_entity)
    gen_vhdl_entity
    ;;
c_header)
    gen_c_header
    ;;
info)
    gen_info
    ;;
*)
    gen_info
    echo ""
    print_usage
    ;;
esac


